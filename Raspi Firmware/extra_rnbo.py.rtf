{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 from digitalio import Direction, Pull\
import time\
import random\
import liblo as OSC\
\
class mySwitch():\
    def __init__(self, device, pin):\
        self.device = device\
        self.pin = pin\
        self.last_button_state = False\
        self.last_button_press_time = 0.0\
        self.debounce_time = .2\
        self.device.get_pin(pin).direction = Direction.INPUT\
        self.device.get_pin(pin).pull = Pull.UP\
\
    def Value(self,inversed=True):\
        if not inversed:\
            return self.device.get_pin(self.pin).value\
        else:\
            return not self.device.get_pin(self.pin).value\
\
    def risingEdge(self):\
        current_button_state = self.Value()\
        if current_button_state and not self.last_button_state:\
            self.last_button_state = current_button_state\
            return True\
        self.last_button_state = current_button_state\
        return False\
\
    def debounce(self):\
        current_time = time.time()\
        if self.Value():\
            if current_time - self.last_button_press_time > self.debounce_time:\
                self.last_button_press_time = current_time\
                return True\
        return False\
\
    def timeHeld(self):\
        current_time = time.time()\
        if self.Value():\
            return int(current_time - self.last_button_press_time)\
        else:\
            self.last_button_press_time = current_time\
        return 0\
\
class myLed():\
    def __init__(self, device, pin):\
        self.device = device\
        self.pin = pin\
        self.device.get_pin(pin).switch_to_output(value=True)\
        self.device.get_pin(pin).value = False\
\
    def setValue(self,value):\
        self.device.get_pin(self.pin).value = value\
\
class MyRotaryEncoder:\
    def __init__(self, mcp, pin_a, pin_b,target,enc_number, debounce_time=0.08):\
        self.mcp = mcp\
        self.pin_a = self.mcp.get_pin(pin_a)\
        self.pin_b = self.mcp.get_pin(pin_b)\
\
        self.pin_a.direction = Direction.INPUT\
        self.pin_b.direction = Direction.INPUT\
\
        self.pin_a.pull = Pull.UP\
        self.pin_b.pull = Pull.UP\
\
        self.state = 0\
        self.last_state = 0\
        self.debounce_time = debounce_time\
        self.last_change_time = time.time()\
        self.number = enc_number\
        self.target = target\
    def read_encoder(self):\
        current_time = time.time()\
        if current_time - self.last_change_time < self.debounce_time:\
            return 0  # Debounce\
\
        a_state = self.pin_a.value\
        b_state = self.pin_b.value\
\
        self.state = (a_state << 1) | b_state\
        #print(self.state)\
        text = "/rnbo/inst/0/params/encoder_" + str(self.number)\
        if self.state != self.last_state:\
            if (self.last_state == 0b00 and self.state == 0b01) or \\\
               (self.last_state == 0b01 and self.state == 0b11) or \\\
               (self.last_state == 0b11 and self.state == 0b10) or \\\
               (self.last_state == 0b10 and self.state == 0b00):\
                self.last_change_time = current_time\
                OSC.send(self.target,text,1)\
                return 1  # Clockwise\
            elif (self.last_state == 0b00 and self.state == 0b10) or \\\
                 (self.last_state == 0b10 and self.state == 0b11) or \\\
                 (self.last_state == 0b11 and self.state == 0b01) or \\\
                 (self.last_state == 0b01 and self.state == 0b00):\
                self.last_change_time = current_time\
                OSC.send(self.target,text,-1)\
                return -1  # Counterclockwise\
\
        self.last_state = self.state\
        OSC.send(self.target,text,0)\
        return 0  # No movement\
\
\
def myMap(input_value, input_range_low, input_range_high):\
    mapped_value = (input_value - input_range_low) / (input_range_high - input_range_low)\
    return max(0.0, min(mapped_value, 1.0))\
\
def scale(input_value, input_range_low, input_range_high, output_range_low, output_range_high, is_int=False):\
    if input_value < input_range_low:\
        return output_range_low\
    elif input_value > input_range_high:\
        return output_range_high\
\
    mapped_value = (input_value - input_range_low) / (input_range_high - input_range_low)\
    scaled_value = mapped_value * (output_range_high - output_range_low) + output_range_low\
    if is_int:\
        return int(scaled_value)\
    return scaled_value\
\
kick_arrays = [[1, 0, 0, 1, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0],\
 [1, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0],\
 [1, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 1],\
 [1, 0, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1],\
 [1, 0, 1, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 1],\
 [1, 0, 1, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1, 0, 1, 0], [1, 1, 0, 0, 1, 0, 1, 0], [1, 0, 1, 0, 0, 1, 1, 0],\
 [1, 0, 0, 1, 1, 0, 1, 0], [1, 0, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 0],\
 [1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0]]\
\
snare_arrays = [[0, 0, 1, 0, 0, 0, 1, 0],[0, 0, 1, 0, 0, 0, 1, 0],[0, 0, 1, 0, 0, 0, 1, 0],\
[0, 0, 1, 0, 1, 1, 0, 0],[0, 1, 1, 0, 0, 1, 0, 0],[0, 1, 0, 0, 0, 1, 0, 0],[0, 1, 0, 1, 0, 0, 1, 0],\
[0, 1, 0, 1, 0, 0, 1, 0],[1, 1, 0, 1, 0, 0, 1, 0],[1, 0, 0, 1, 0, 0, 1, 1],[1, 0, 1, 1, 0, 1, 0, 0],\
[1, 0, 0, 1, 0, 1, 0, 0],[1, 0, 0, 0, 0, 1, 0, 0],[1, 0, 1, 0, 0, 1, 0, 0],[0, 0, 1, 0, 0, 1, 0, 1],\
[0, 0, 1, 0, 0, 1, 1, 0],[0, 0, 1, 0, 0, 1, 1, 0],[0, 0, 1, 0, 0, 0, 1, 0]]\
\
hh_arrays = [[1, 0, 1, 0, 1, 0, 1, 1],[1, 0, 0, 0, 1, 0, 1, 1],[1, 1, 0, 0, 1, 0, 1, 1],\
[1, 1, 0, 1, 0, 0, 1, 1],[1, 0, 1, 1, 0, 0, 1, 1],[0, 0, 1, 1, 0, 1, 0, 1],[0, 0, 1, 0, 0, 1, 0, 1],\
[0, 1, 0, 1, 0, 1, 1, 1],[0, 1, 0, 1, 1, 1, 0, 1],[0, 1, 1, 1, 0, 1, 0, 1],[1, 1, 0, 1, 0, 1, 0, 1],\
[1, 0, 0, 1, 1, 1, 0, 1],[1, 1, 0, 0, 1, 1, 0, 1],[1, 0, 0, 1, 1, 0, 0, 1],[1, 1, 0, 1, 1, 0, 0, 1],\
[1, 1, 0, 1, 1, 0, 1, 1],[1, 1, 0, 1, 1, 1, 0, 1],[1, 0, 1, 1, 1, 1, 1, 1],[1, 0, 1, 0, 1, 0, 1, 0],\
[1, 1, 1, 1, 1, 1, 1, 1],[0, 1, 0, 1, 0, 1, 0, 1]]\
\
other_arrays = [[1, 0, 1, 0, 1, 0, 1, 1],[1, 0, 0, 0, 1, 0, 1, 1],\
[1, 1, 0, 0, 1, 0, 1, 1],[1, 1, 0, 1, 0, 0, 1, 1],[1, 0, 1, 1, 0, 0, 1, 1],[0, 0, 1, 1, 0, 1, 0, 1],\
[0, 0, 1, 0, 0, 1, 0, 1],[0, 1, 0, 1, 0, 1, 1, 1],[0, 1, 0, 1, 1, 1, 0, 1],[0, 1, 1, 1, 0, 1, 0, 1],\
[1, 1, 0, 1, 0, 1, 0, 1],[1, 0, 0, 1, 1, 1, 0, 1],[1, 1, 0, 0, 1, 1, 0, 1],[1, 0, 0, 1, 1, 0, 0, 1],\
[1, 1, 0, 1, 1, 0, 0, 1],[1, 1, 0, 1, 1, 0, 1, 1],[1, 1, 0, 1, 1, 1, 0, 1],[1, 0, 1, 1, 1, 1, 1, 1],\
[1, 0, 1, 0, 1, 0, 1, 0],[1, 1, 1, 1, 1, 1, 1, 1],[0, 1, 0, 1, 0, 1, 0, 1],[0, 1, 0, 1, 0, 1, 0, 1],\
[0, 1, 0, 1, 0, 0, 1, 0],[0, 1, 0, 1, 0, 0, 1, 0],[0, 1, 0, 1, 0, 0, 1, 0],[0, 1, 0, 1, 0, 0, 1, 0],\
[0, 1, 0, 1, 0, 0, 1, 0],[0, 1, 0, 1, 0, 0, 1, 0],[1, 1, 0, 1, 0, 0, 1, 0],[1, 0, 0, 1, 0, 0, 1, 1],\
[1, 0, 1, 1, 0, 1, 0, 0],[1, 0, 0, 1, 0, 1, 0, 0],[1, 0, 0, 0, 0, 1, 0, 0],[1, 0, 1, 0, 0, 1, 0, 0],\
[0, 0, 1, 0, 0, 1, 0, 1],[0, 0, 1, 0, 0, 1, 1, 0],[0, 0, 1, 0, 0, 1, 1, 0],[0, 0, 1, 0, 0, 0, 1, 0],\
[0, 0, 1, 0, 0, 0, 1, 0],[0, 0, 1, 0, 0, 0, 1, 0],[0, 0, 1, 0, 0, 0, 1, 0],[0, 0, 1, 0, 0, 0, 1, 0],\
[0, 0, 1, 0, 0, 0, 1, 0],[1, 0, 1, 0, 1, 0, 1, 1],[1, 0, 0, 0, 1, 0, 1, 1]]\
\
def getRandomPattern(mode, drumArr):\
    if mode == 0:\
        drumArr[mode] = random.choice(kick_arrays)\
    elif mode == 1:\
        drumArr[mode] = random.choice(snare_arrays)\
    elif mode == 2:\
        drumArr[mode] = random.choice(hh_arrays)\
    elif mode == 3:\
        drumArr[mode] = random.choice(other_arrays)\
    elif mode == 4:\
        drumArr[mode] = random.choice(hh_arrays)\
    elif mode == 5:\
        drumArr[mode] = random.choice(snare_arrays)\
    elif mode == 6:\
        drumArr[mode] = random.choice(kick_arrays)\
    else:\
        return}